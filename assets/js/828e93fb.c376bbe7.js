"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2510],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,k=d["".concat(o,".").concat(m)]||d[m]||c[m]||l;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9004:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var a=n(3117),r=n(102),l=(n(7294),n(3905)),i=["components"],s={sidebar_position:3},o="Install pcap Sensor",p={unversionedId:"api-observability/install-guide/install-sensor/pcap-sensor",id:"api-observability/install-guide/install-sensor/pcap-sensor",title:"Install pcap Sensor",description:"Prerequisites",source:"@site/docs/api-observability/install-guide/install-sensor/pcap-sensor.md",sourceDirName:"api-observability/install-guide/install-sensor",slug:"/api-observability/install-guide/install-sensor/pcap-sensor",permalink:"/api-observability/install-guide/install-sensor/pcap-sensor",draft:!1,editUrl:"https://github.com/levoai/docs/edit/main/docs/api-observability/install-guide/install-sensor/pcap-sensor.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Install eBPF Sensor",permalink:"/api-observability/install-guide/install-sensor/ebpf-sensor"},next:{title:"Generate Application Traffic",permalink:"/api-observability/install-guide/generate-traffic"}},u={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Follow instructions for your platform",id:"follow-instructions-for-your-platform",level:2},{value:"Install Sensor on Fargate",id:"install-sensor-on-fargate",level:2},{value:"Install via Docker",id:"install-via-docker",level:2},{value:"Prerequisites",id:"prerequisites-1",level:3},{value:"Install on Kubernetes as daemonset",id:"install-on-kubernetes-as-daemonset",level:2},{value:"Prerequisites",id:"prerequisites-2",level:3},{value:"1. Install levoai helm repo",id:"1-install-levoai-helm-repo",level:3},{value:"2. Create levoai namespace and install pcap-sensor",id:"2-create-levoai-namespace-and-install-pcap-sensor",level:3},{value:"AWS Permissions needed",id:"aws-permissions-needed",level:2}],d={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"install-pcap-sensor"},"Install pcap Sensor"),(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Docker Engine version  ",(0,l.kt)("inlineCode",{parentName:"li"},"18.03.0"),"  and above"),(0,l.kt)("li",{parentName:"ul"},"Admin (or  ",(0,l.kt)("inlineCode",{parentName:"li"},"sudo"),") privileges on the Docker host"),(0,l.kt)("li",{parentName:"ul"},"AWS profile access key and secret access key saved at path  ~/.aws/credentials file"),(0,l.kt)("li",{parentName:"ul"},"The profile should have all the required permissions as listed ",(0,l.kt)("a",{parentName:"li",href:"#aws-permissions"},"here")),(0,l.kt)("li",{parentName:"ul"},"Refer ",(0,l.kt)("a",{parentName:"li",href:"https://www.tcpdump.org/manpages/pcap-filter.7.html"},"pcap-filter-guide")," to apply filters.")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"NOTE:")),"  You need to have the satellite installed already to configure the sensor to point to it. If you haven't done it already, head over to ",(0,l.kt)("a",{parentName:"p",href:"/api-observability/install-guide/install-satellite"},"Install Satellite "))),(0,l.kt)("h2",{id:"follow-instructions-for-your-platform"},"Follow instructions for your platform"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#install-fargate"},"Install on Fargate")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#install-docker"},"Install via Docker")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#install-kubernetes"},"Install on Kuberenetes"))),(0,l.kt)("a",{id:"install-fargate"}),(0,l.kt)("h2",{id:"install-sensor-on-fargate"},"Install Sensor on Fargate"),(0,l.kt)("p",null,"The pcap Sensor can be installed as a sidecar on an existing AWS task by adding to its task definition via the AWS Console."),(0,l.kt)("p",null,"The steps to add the sensor to your task are as follows"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Go to Task Definitions"),(0,l.kt)("li",{parentName:"ul"},"Select the required task definition"),(0,l.kt)("li",{parentName:"ul"},"Click on ",(0,l.kt)("inlineCode",{parentName:"li"},"Create revision with JSON")),(0,l.kt)("li",{parentName:"ul"},"Add the given JSON object under ContainerDefinitions"),(0,l.kt)("li",{parentName:"ul"},"Replace the values for satellite-url, levo-env and levoai-org-id in entrypoint."),(0,l.kt)("li",{parentName:"ul"},"Replace the values for Environment and LogConfiguration as per your requirement."),(0,l.kt)("li",{parentName:"ul"},"Set the memory limit in ",(0,l.kt)("inlineCode",{parentName:"li"},"Mib")," (",(0,l.kt)("em",{parentName:"li"},"Note: memory should not exceed the Task memory limit"),")")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "levo-pcap-sensor",\n    "image": "levoai/pcap-sensor",\n    "cpu": 0,\n    "memory": 2048,\n    "portMappings": [],\n    "essential": false,\n    "entryPoint": [\n        "./bin/levo-pcap-sensor",\n        "apidump",\n        "--satellite-url",\n        "< INSERT SATELLITE URL (http(s)://hostname|IP:port) >",\n        "--levo-env",\n        "<INSERT APPLICATION ENVIRONMENT (staging, production etc.)>",\n        "--levoai-org-id",\n        "< INSERT LEVO ORG ID >"\n    ],\n    "environment": [\n        {\n            "name": "LEVO_AWS_REGION",\n            "value": "< INSERT AWS REGION (us-west-2) >"\n        }\n    ],\n    "mountPoints": [],\n    "volumesFrom": [],\n    "logConfiguration": {\n        "logDriver": "awslogs",\n        "options": {\n            "awslogs-group": "< INSERT LOGS IDENTIFIER (/ecs/your-application-pcap) >",\n            "awslogs-create-group": "true",\n            "awslogs-region": "< INSERT AWS REGION (us-west-2) >",\n            "awslogs-stream-prefix": "ecs-pcap"\n        }\n    }\n}\n')),(0,l.kt)("p",null,"Specify additional flags in the entrypoint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"--trace-export-interval     # default 10s\n--rate-limit                # default 1000/min\n--filter                    # eg. port 8080 and (not port 8081)\n--host-allow                # regex for allowed hosts\n--path-allow                # regex for allowed paths\n--host-exclusions           # regex for excluded hosts\n--path-exclusions           # regex for excluded paths\n")),(0,l.kt)("h2",{id:"install-via-docker"},"Install via Docker"),(0,l.kt)("h3",{id:"prerequisites-1"},"Prerequisites"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Docker Engine version  ",(0,l.kt)("inlineCode",{parentName:"li"},"18.03.0"),"  and above"),(0,l.kt)("li",{parentName:"ul"},"Admin (or  ",(0,l.kt)("inlineCode",{parentName:"li"},"sudo"),") privileges on the Docker host")),(0,l.kt)("p",null,"If you are running the satellite as a docker container on the host machine, use the satellite-url ",(0,l.kt)("inlineCode",{parentName:"p"},"http://host.docker.internal:9999"),"\nDo ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"NOT "))," use ",(0,l.kt)("inlineCode",{parentName:"p"},"localhost")," as the hostname, since the sensor is running inside a container."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'sudo docker run --net=host --rm -it levoai/pcap-sensor \\\n./bin/levo-pcap-sensor apidump \\\n--satellite-url "your satellite url (http(s)://hostname|IP:port)" \\\n--levo-env "your application environment (staging, production etc.)" \\\n--levoai-org-id "your levo org id"\n')),(0,l.kt)("p",null,"Specify additional flags in the command"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'--trace-export-interval "trace export interval in seconds (default 10)"\n--rate-limit "rate limit in traces per min (default 1000)"\n--filter "pcap filter string, eg. port 8080 and (not port 8081)"\n--host-allow "host allow regex"\n--path-allow "path allow regex"\n--host-exclusions "host exclude regex"\n--path-exclusions "path exclude regex"\n')),(0,l.kt)("a",{id:"install-kubernetes"}),(0,l.kt)("h2",{id:"install-on-kubernetes-as-daemonset"},"Install on Kubernetes as daemonset"),(0,l.kt)("h3",{id:"prerequisites-2"},"Prerequisites"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Kubernetes version >= v1.18.0"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://helm.sh/docs/intro/install/"},"Helm v3"),"  installed and working."),(0,l.kt)("li",{parentName:"ul"},"The Kubernetes cluster API endpoint should be reachable from the machine you are running Helm."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"kubectl"),"  access to the cluster, with  ",(0,l.kt)("inlineCode",{parentName:"li"},"cluster-admin"),"  permissions.")),(0,l.kt)("h3",{id:"1-install-levoai-helm-repo"},"1. Install levoai helm repo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"helm repo add levoai https://charts.levo.ai && helm repo update\n")),(0,l.kt)("h3",{id:"2-create-levoai-namespace-and-install-pcap-sensor"},"2. Create levoai namespace and install pcap-sensor"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Replace 'hostname|IP' & 'port' with the values you noted down from the Satellite install\n# If Sensor is installed on same cluster as Satellite, use 'http://levoai-satellite:9999'\n# Specify below the 'Application Name' chosen earlier.\n#\nhelm upgrade levoai-pcap-sensor levoai/levoai-pcap-sensor \\\n  --install \\\n  --namespace levoai \\\n  --create-namespace \\\n  --set sensor.config.levoaiOrgId=\"your Levo Org ID\" \\\n  --set sensor.config.satelliteUrl=\"http(s)://hostname|IP:port\"\n  --set sensor.confg.levoEnv=\"your application environment (staging, production etc.)\"\n")),(0,l.kt)("p",null,"Set additional configs"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'sensor.config.traceExportInterval="trace export interval in seconds (default 10)"\nsensor.config.rateLimit="rate limit number in traces/min (default 1000)"\nsensor.config.fitler="pcap filter string, eg. port 8080 and (not port 8081)"\nsensor.config.hostAllow="host allow regex"\nsensor.config.pathAllow="path allow regex"\nsensor.config.hostExclusions="host exclusion regex"\nsensor.config.pathExclusions="path exclusion regex"\n')),(0,l.kt)("a",{id:"aws-permissions"}),(0,l.kt)("h2",{id:"aws-permissions-needed"},"AWS Permissions needed"),(0,l.kt)("p",null,"Add the ",(0,l.kt)("strong",{parentName:"p"},"AmazonECS_FullAccess")," policy to get access to all the necessary permissions."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Action"),(0,l.kt)("th",{parentName:"tr",align:null},"Resource"),(0,l.kt)("th",{parentName:"tr",align:null},"Purpose"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ec2:DescribeRegions"),(0,l.kt)("td",{parentName:"tr",align:null},"*"),(0,l.kt)("td",{parentName:"tr",align:null},"Find the list of AWS regions you have enabled. (If not present, defaults to a precompiled list.)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ecs:ListClusters"),(0,l.kt)("td",{parentName:"tr",align:null},"*"),(0,l.kt)("td",{parentName:"tr",align:null},"Find the available ECS clusters.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ecs:DescribeClusters"),(0,l.kt)("td",{parentName:"tr",align:null},", or restricted to account like ",(0,l.kt)("inlineCode",{parentName:"td"},"arn:aws:ecs:::cluster/*")),(0,l.kt)("td",{parentName:"tr",align:null},"Look up the names of the available ECS clusters.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ecs:ListTaskDefinitionFamilies"),(0,l.kt)("td",{parentName:"tr",align:null},"*"),(0,l.kt)("td",{parentName:"tr",align:null},"Find the available task definitions.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ecs:DescribeTaskDefinition"),(0,l.kt)("td",{parentName:"tr",align:null},"*"),(0,l.kt)("td",{parentName:"tr",align:null},"Read the existing task definition in order to copy it.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ecs:RegisterTaskDefinition"),(0,l.kt)("td",{parentName:"tr",align:null},"*"),(0,l.kt)("td",{parentName:"tr",align:null},"Write a new version of the task definition.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ecs:ListServices"),(0,l.kt)("td",{parentName:"tr",align:null},"*"),(0,l.kt)("td",{parentName:"tr",align:null},"Find the available services.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ecs:DescribeServices"),(0,l.kt)("td",{parentName:"tr",align:null},"*, or restricted to your account, or restricted to the cluster you selected"),(0,l.kt)("td",{parentName:"tr",align:null},"Identify which services are using the task definition you selected.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ecs:UpdateService"),(0,l.kt)("td",{parentName:"tr",align:null},"*, or restricted to your account, or restricted to the cluster you selected"),(0,l.kt)("td",{parentName:"tr",align:null},"Update and restart the service using the new task definition.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ecs:TagResource"),(0,l.kt)("td",{parentName:"tr",align:null},"*, or restricted to your account, or restricted to the cluster you selected"),(0,l.kt)("td",{parentName:"tr",align:null},"Mark the service as having been updated by Levoai.")))))}m.isMDXComponent=!0}}]);