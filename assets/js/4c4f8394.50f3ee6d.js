"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6112],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1605:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var r=n(3117),i=n(102),o=(n(7294),n(3905)),a=["components"],l={sidebar_position:5},s="Install Log Parsing Sensors",p={unversionedId:"install-log-parsing-sensors",id:"install-log-parsing-sensors",title:"Install Log Parsing Sensors",description:"Access Logs Based Instrumentation",source:"@site/docs/install-log-parsing-sensors.md",sourceDirName:".",slug:"/install-log-parsing-sensors",permalink:"/install-log-parsing-sensors",draft:!1,editUrl:"https://github.com/levoai/docs/edit/main/docs/install-log-parsing-sensors.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Kubernetes Configuration",permalink:"/install-traffic-capture-sensors/common-tasks/k8s-helm-values"},next:{title:"Install Code Analysis Tools",permalink:"/install-code-analysis-tools"}},u={},c=[{value:"Access Logs Based Instrumentation",id:"access-logs-based-instrumentation",level:2},{value:"i. Pre-requisites",id:"i-pre-requisites",level:3},{value:"ii. Pick an <code>Application Name</code>",id:"ii-pick-an-application-name",level:2},{value:"iii. Follow instructions for your platform",id:"iii-follow-instructions-for-your-platform",level:2},{value:"Install on Linux host via Docker",id:"install-on-linux-host-via-docker",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"1. Install Log Parser",id:"1-install-log-parser",level:3},{value:"NOTE:",id:"note",level:4},{value:"2. Verify connectivity with Satellite",id:"2-verify-connectivity-with-satellite",level:3}],d={toc:c};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"install-log-parsing-sensors"},"Install Log Parsing Sensors"),(0,o.kt)("h2",{id:"access-logs-based-instrumentation"},"Access Logs Based Instrumentation"),(0,o.kt)("h3",{id:"i-pre-requisites"},"i. Pre-requisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Satellite has been successfully installed."),(0,o.kt)("li",{parentName:"ul"},"You have noted down the Satellite's ",(0,o.kt)("inlineCode",{parentName:"li"},"hostname:port")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"ip-address:port")," information."),(0,o.kt)("li",{parentName:"ul"},"The Satellite is reachable (via HTTP/s) from the location where you are going to install the log-parser.")),(0,o.kt)("h2",{id:"ii-pick-an-application-name"},"ii. Pick an ",(0,o.kt)("inlineCode",{parentName:"h2"},"Application Name")),(0,o.kt)("p",null,"Auto discovered API endpoints and their OpenAPI specifications are shown in the ",(0,o.kt)("a",{parentName:"p",href:"/guides/security-testing/concepts/api-catalog"},"API Catalog"),", grouped under an application name. The application name helps segregate and group API endpoints from different environments, similar to how file folders work in an operating system."),(0,o.kt)("p",null,"Pick a descriptive name which will be used in the subsequent step below. For example: ",(0,o.kt)("inlineCode",{parentName:"p"},"my-test-app"),"."),(0,o.kt)("h2",{id:"iii-follow-instructions-for-your-platform"},"iii. Follow instructions for your platform"),(0,o.kt)("p",null,"Follow instructions for your specific platform/method below:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#install-on-linux-host-via-docker"},"Install on Linux host via Docker"))),(0,o.kt)("br",null),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"install-on-linux-host-via-docker"},"Install on Linux host via Docker"),(0,o.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Docker Engine version ",(0,o.kt)("inlineCode",{parentName:"li"},"18.03.0")," and above")),(0,o.kt)("h3",{id:"1-install-log-parser"},"1. Install Log Parser"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"If you are installing the Satellite and Log Parser on the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"same"))," Linux host, please do ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"NOT"))," use ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost")," as the hostname below. Use the Linux host's ",(0,o.kt)("inlineCode",{parentName:"p"},"IP address"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"domain name")," instead. This is required as the Log Parser runs inside a Docker container, and ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost")," resolves to the Log Parser container's IP address, instead of the Linux host.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Replace '<SATELLITE_URL>' with the values you noted down from the Satellite install\n#\n# Specify below the 'APP_NAME'. Do not quote the 'APP_NAME'.\n# Environment Name is optional. If not specified, it defaults to 'staging'\n# \ndocker run --rm -d --name=log-parser \\\n  -v ./logs:/mnt/levo/logs \\\n  -e LEVO_SATELLITE_URL=<LEVO_SATELLITE_URL> \\\n  -e LEVOAI_ORG_ID=<LEVOAI_ORG_ID> \\\n  -e APP_NAME=<APP_NAME> \\\n  -e ENV_NAME=<ENV_NAME> \\\n  levoai/log-parser \n")),(0,o.kt)("h4",{id:"note"},"NOTE:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The default address for the satellite in Docker-based Log Parser installations is ",(0,o.kt)("inlineCode",{parentName:"li"},"https://satellite.levo.ai"),"."),(0,o.kt)("li",{parentName:"ul"},"In case of levo hosted satellite, it is necessary that you must also specify an organization ID (",(0,o.kt)("inlineCode",{parentName:"li"},"LEVOAI_ORG_ID"),")."),(0,o.kt)("li",{parentName:"ul"},"If you wish, you may also host the Satellite yourself and specify the address of the satellite to direct the Log Parser's data to it.")),(0,o.kt)("h3",{id:"2-verify-connectivity-with-satellite"},"2. Verify connectivity with Satellite"),(0,o.kt)("p",null,"Execute the following command to check for connectivity health:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Please specify the actual container name for log-parser below\ndocker logs log-parser | grep "starting fluentd"\n')),(0,o.kt)("p",null,"If connectivity is healthy, you should see output similar to below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'2024-02-22 01:27:06 +0000 [info]: starting fluentd-1.16.3 pid=7 ruby="3.2.2"\n2024-02-22 01:27:06 +0000 [info]: #0 starting fluentd worker pid=16 ppid=7 worker=0\n2024-02-22 01:27:06.831947051 +0000 fluent.info: {"pid":16,"ppid":7,"worker":0,"message":"starting fluentd worker pid=16 ppid=7 worker=0"}\n')),(0,o.kt)("p",null,"Please proceed to the next step, if there are no errors."))}m.isMDXComponent=!0}}]);