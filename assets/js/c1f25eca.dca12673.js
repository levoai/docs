"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5397],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(i,".").concat(m)]||d[m]||u[m]||s;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<s;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5247:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=n(3117),a=n(102),s=(n(7294),n(3905)),o=["components"],l={sidebar_position:0},i="Sensor on Fargate",p={unversionedId:"install-traffic-capture-sensors/pcap-sensor/sensor-fargate",id:"install-traffic-capture-sensors/pcap-sensor/sensor-fargate",title:"Sensor on Fargate",description:"Prerequisites",source:"@site/docs/install-traffic-capture-sensors/pcap-sensor/sensor-fargate.md",sourceDirName:"install-traffic-capture-sensors/pcap-sensor",slug:"/install-traffic-capture-sensors/pcap-sensor/sensor-fargate",permalink:"/install-traffic-capture-sensors/pcap-sensor/sensor-fargate",draft:!1,editUrl:"https://github.com/levoai/docs/edit/main/docs/install-traffic-capture-sensors/pcap-sensor/sensor-fargate.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Install PCAP Sensor",permalink:"/install-traffic-capture-sensors/pcap-sensor/"},next:{title:"Sensor via Docker",permalink:"/install-traffic-capture-sensors/pcap-sensor/sensor-docker"}},c={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Install Sensor on Fargate",id:"install-sensor-on-fargate",level:2},{value:"AWS Permissions needed",id:"aws-permissions-needed",level:3},{value:"Sensor Lifecycle Management",id:"sensor-lifecycle-management",level:2},{value:"Configure Satellite Address (<code>host:port</code> information)",id:"configure-satellite-address-hostport-information",level:3},{value:"Start Sensor",id:"start-sensor",level:3},{value:"Get Sensor Status",id:"get-sensor-status",level:3},{value:"Stop Sensor",id:"stop-sensor",level:3},{value:"Check Sensor Logs",id:"check-sensor-logs",level:3},{value:"Show Sensor Config",id:"show-sensor-config",level:3},{value:"Uninstall Sensor",id:"uninstall-sensor",level:3},{value:"Manage Sensor Configuration",id:"manage-sensor-configuration",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"sensor-on-fargate"},"Sensor on Fargate"),(0,s.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"AWS profile access key and secret access key saved at path  ~/.aws/credentials file"),(0,s.kt)("li",{parentName:"ul"},"The profile should have all the required permissions as listed ",(0,s.kt)("a",{parentName:"li",href:"#aws-permissions"},"here"))),(0,s.kt)("h2",{id:"install-sensor-on-fargate"},"Install Sensor on Fargate"),(0,s.kt)("p",null,"The pcap Sensor can be installed as a sidecar on an existing AWS task by adding to its task definition via the AWS Console."),(0,s.kt)("p",null,"The steps to add the sensor to your task are as follows"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Go to Task Definitions"),(0,s.kt)("li",{parentName:"ul"},"Select the required task definition"),(0,s.kt)("li",{parentName:"ul"},"Click on ",(0,s.kt)("inlineCode",{parentName:"li"},"Create revision with JSON")),(0,s.kt)("li",{parentName:"ul"},"Add the given JSON object under ContainerDefinitions"),(0,s.kt)("li",{parentName:"ul"},"Replace the values for satellite-url, levo-env and levoai-org-id in entrypoint."),(0,s.kt)("li",{parentName:"ul"},"Replace the values for Environment and LogConfiguration as per your requirement."),(0,s.kt)("li",{parentName:"ul"},"Set the cpu limit as number of CPU Units (",(0,s.kt)("em",{parentName:"li"},"Note: 1 core = 1024 CPU Units"),")"),(0,s.kt)("li",{parentName:"ul"},"Set the memory limit in ",(0,s.kt)("inlineCode",{parentName:"li"},"Mib")," (",(0,s.kt)("em",{parentName:"li"},"Note: memory should not exceed the Task memory limit"),")")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "levo-pcap-sensor",\n    "image": "levoai/pcap-sensor:0.0.20",\n    "cpu": 512,\n    "memory": 512,\n    "portMappings": [],\n    "essential": false,\n    "entryPoint": [\n        "./bin/init",\n        "apidump",\n        "--satellite-url",\n        "< INSERT SATELLITE URL (http(s)://hostname|IP:port) >",\n        "--levo-env",\n        "<INSERT APPLICATION ENVIRONMENT (staging, production etc.)>",\n        "--levoai-org-id",\n        "< INSERT LEVO ORG ID >",\n        "--rate-limit",\n        "<INSERT NUMBER OF TRACES PER MINUTE>"\n    ],\n    "environment": [\n        {\n            "name": "LEVO_AWS_REGION",\n            "value": "< INSERT AWS REGION (us-west-2) >"\n        }\n    ],\n    "mountPoints": [],\n    "volumesFrom": [],\n    "logConfiguration": {\n        "logDriver": "awslogs",\n        "options": {\n            "awslogs-group": "< INSERT LOGS IDENTIFIER (/ecs/your-application-pcap) >",\n            "awslogs-create-group": "true",\n            "awslogs-region": "< INSERT AWS REGION (us-west-2) >",\n            "awslogs-stream-prefix": "ecs-pcap"\n        }\n    }\n}\n')),(0,s.kt)("p",null,"Specify additional flags in the entrypoint"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"--trace-export-interval     # default 10s\n--rate-limit                # number of traces per minute\n--filter                    # eg. port 8080 and (not port 8081)\n--host-allow                # regex for allowed hosts\n--path-allow                # regex for allowed paths\n--host-exclusions           # regex for excluded hosts\n--path-exclusions           # regex for excluded paths\n")),(0,s.kt)("a",{id:"aws-permissions"}),(0,s.kt)("h3",{id:"aws-permissions-needed"},"AWS Permissions needed"),(0,s.kt)("p",null,"Add the ",(0,s.kt)("strong",{parentName:"p"},"AmazonECS_FullAccess")," policy to get access to all the necessary permissions."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Action"),(0,s.kt)("th",{parentName:"tr",align:null},"Resource"),(0,s.kt)("th",{parentName:"tr",align:null},"Purpose"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"ec2:DescribeRegions"),(0,s.kt)("td",{parentName:"tr",align:null},"*"),(0,s.kt)("td",{parentName:"tr",align:null},"Find the list of AWS regions you have enabled. (If not present, defaults to a precompiled list.)")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"ecs:ListClusters"),(0,s.kt)("td",{parentName:"tr",align:null},"*"),(0,s.kt)("td",{parentName:"tr",align:null},"Find the available ECS clusters.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"ecs:DescribeClusters"),(0,s.kt)("td",{parentName:"tr",align:null},", or restricted to account like ",(0,s.kt)("inlineCode",{parentName:"td"},"arn:aws:ecs:::cluster/*")),(0,s.kt)("td",{parentName:"tr",align:null},"Look up the names of the available ECS clusters.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"ecs:ListTaskDefinitionFamilies"),(0,s.kt)("td",{parentName:"tr",align:null},"*"),(0,s.kt)("td",{parentName:"tr",align:null},"Find the available task definitions.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"ecs:DescribeTaskDefinition"),(0,s.kt)("td",{parentName:"tr",align:null},"*"),(0,s.kt)("td",{parentName:"tr",align:null},"Read the existing task definition in order to copy it.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"ecs:RegisterTaskDefinition"),(0,s.kt)("td",{parentName:"tr",align:null},"*"),(0,s.kt)("td",{parentName:"tr",align:null},"Write a new version of the task definition.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"ecs:ListServices"),(0,s.kt)("td",{parentName:"tr",align:null},"*"),(0,s.kt)("td",{parentName:"tr",align:null},"Find the available services.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"ecs:DescribeServices"),(0,s.kt)("td",{parentName:"tr",align:null},"*, or restricted to your account, or restricted to the cluster you selected"),(0,s.kt)("td",{parentName:"tr",align:null},"Identify which services are using the task definition you selected.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"ecs:UpdateService"),(0,s.kt)("td",{parentName:"tr",align:null},"*, or restricted to your account, or restricted to the cluster you selected"),(0,s.kt)("td",{parentName:"tr",align:null},"Update and restart the service using the new task definition.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"ecs:TagResource"),(0,s.kt)("td",{parentName:"tr",align:null},"*, or restricted to your account, or restricted to the cluster you selected"),(0,s.kt)("td",{parentName:"tr",align:null},"Mark the service as having been updated by Levoai.")))),(0,s.kt)("h2",{id:"sensor-lifecycle-management"},"Sensor Lifecycle Management"),(0,s.kt)("h3",{id:"configure-satellite-address-hostport-information"},"Configure Satellite Address (",(0,s.kt)("inlineCode",{parentName:"h3"},"host:port")," information)"),(0,s.kt)("p",null,"The Satellite address is configured in ",(0,s.kt)("inlineCode",{parentName:"p"},"/etc/levo/sensor/config.yaml"),". The default ",(0,s.kt)("inlineCode",{parentName:"p"},"host:port")," for Satellite is ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost:4317"),"."),(0,s.kt)("p",null,"Edit ",(0,s.kt)("inlineCode",{parentName:"p"},"/etc/levo/sensor/config.yaml"),", and set ",(0,s.kt)("inlineCode",{parentName:"p"},"collector-endpoint")," (under Satellite Settings) to the desired ",(0,s.kt)("inlineCode",{parentName:"p"},"host:port")," value."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"...\n# --------------------------------------------------------------------------------------------\n# Satellite Settings:\n# --------------------------------------------------------------------------------------------\n# host:port for the collector service receiving the sensor's API traces.\ncollector-endpoint: <set to desired host:port value>\n# --------------------------------------------------------------------------------------------\n...\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"A Sensor ",(0,s.kt)("em",{parentName:"strong"},"restart")," is required for this to take effect.")),(0,s.kt)("h3",{id:"start-sensor"},"Start Sensor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# Note: The default config file is located at: '/etc/levo/sensor/config.yaml'\nsudo systemctl start levo-ebpf-sensor\n")),(0,s.kt)("h3",{id:"get-sensor-status"},"Get Sensor Status"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl status levo-ebpf-sensor\n")),(0,s.kt)("h3",{id:"stop-sensor"},"Stop Sensor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl stop levo-ebpf-sensor\n")),(0,s.kt)("h3",{id:"check-sensor-logs"},"Check Sensor Logs"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"journalctl -u levo-ebpf-sensor.service -b -f --since \"15min ago\"\n\n# If journalctl isn't providing logs, you can alternatively:\nsudo cat syslog | grep 'levo-ebpf-sensor'\n")),(0,s.kt)("h3",{id:"show-sensor-config"},"Show Sensor Config"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"cat /etc/levo/sensor/config.yaml\n")),(0,s.kt)("h3",{id:"uninstall-sensor"},"Uninstall Sensor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"sudo\xa0apt remove --purge levo-ebpf-sensor\nsudo apt clean\n")),(0,s.kt)("h3",{id:"manage-sensor-configuration"},"Manage Sensor Configuration"),(0,s.kt)("p",null,"Please refer to ",(0,s.kt)("a",{parentName:"p",href:"/install-traffic-capture-sensors/common-tasks/sensor-configuration"},"Sensor Configuration"),", and ",(0,s.kt)("a",{parentName:"p",href:"/install-traffic-capture-sensors/common-tasks/sensor-configuration#running-on-linux-host"},"Applying Configuration Changes"),"."))}m.isMDXComponent=!0}}]);