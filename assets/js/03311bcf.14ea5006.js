"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1091],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),f=a,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},792:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],l={sidebar_position:5},s="AWS CloudFront",u={unversionedId:"install-traffic-capture-sensors/aws-cloudfront",id:"install-traffic-capture-sensors/aws-cloudfront",title:"AWS CloudFront",description:"Lambda@Edge functions to ingest traffic from AWS CloudFront distributions.",source:"@site/docs/install-traffic-capture-sensors/aws-cloudfront.md",sourceDirName:"install-traffic-capture-sensors",slug:"/install-traffic-capture-sensors/aws-cloudfront",permalink:"/install-traffic-capture-sensors/aws-cloudfront",draft:!1,editUrl:"https://github.com/levoai/docs/edit/main/docs/install-traffic-capture-sensors/aws-cloudfront.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Cloudflare Worker",permalink:"/install-traffic-capture-sensors/cloudflare-worker"},next:{title:"AWS Traffic Mirroring",permalink:"/install-traffic-capture-sensors/aws-traffic-mirroring"}},c={},p=[{value:"Installation",id:"installation",level:2},{value:"Pre-requisites",id:"pre-requisites",level:3},{value:"Creating the Lambda Functions using the AWS CLI",id:"creating-the-lambda-functions-using-the-aws-cli",level:3},{value:"Associating the Lambdas with a CloudFront Distribution",id:"associating-the-lambdas-with-a-cloudfront-distribution",level:3}],d={toc:p};function f(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"aws-cloudfront"},"AWS CloudFront"),(0,i.kt)("p",null,"Lambda@Edge functions to ingest traffic from AWS CloudFront distributions."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("h3",{id:"pre-requisites"},"Pre-requisites"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Install the AWS CLI (version 2) by following the ",(0,i.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"},"AWS docs"),"."),(0,i.kt)("li",{parentName:"ul"},"You have sufficient permissions on AWS to create and deploy Lambda@Edge functions."),(0,i.kt)("li",{parentName:"ul"},"The Satellite has been successfully set up and is reachable (via HTTPS) from the worker.")),(0,i.kt)("h3",{id:"creating-the-lambda-functions-using-the-aws-cli"},"Creating the Lambda Functions using the AWS CLI"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Obtain your organization's ID from ",(0,i.kt)("a",{parentName:"li",href:"https://app.levo.ai/settings/organizations"},"https://app.levo.ai/settings/organizations")," or by\nclicking on your profile picture in Levo's dashboard, and navigating to ",(0,i.kt)("inlineCode",{parentName:"li"},"User Settings -> Organizations"),"."),(0,i.kt)("li",{parentName:"ul"},"Run the ",(0,i.kt)("inlineCode",{parentName:"li"},"install.sh")," script in the repository.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/levoai/aws-cloudfront-lambda\ncd aws-cloudfront-lambda\nLEVO_ORG_ID=<value> ./install.sh\n")),(0,i.kt)("h3",{id:"associating-the-lambdas-with-a-cloudfront-distribution"},"Associating the Lambdas with a CloudFront Distribution"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Go to the ",(0,i.kt)("a",{parentName:"li",href:"https://us-east-1.console.aws.amazon.com/cloudfront/v4/home#/distributions"},"AWS CloudFront Console")," and select your distribution."),(0,i.kt)("li",{parentName:"ol"},'Click on the "Behaviors" tab, then click on the "Create Behaviour" button.'),(0,i.kt)("li",{parentName:"ol"},"Configure the behaviour and ensure that the following properties are set:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Path pattern: Use ",(0,i.kt)("inlineCode",{parentName:"li"},"*")," to send all JSON payloads to Levo, or use a more specific API pattern"),(0,i.kt)("li",{parentName:"ul"},"Origin and origin groups: The origin for which the traffic should be sent"),(0,i.kt)("li",{parentName:"ul"},"Allowed HTTP methods: GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE"),(0,i.kt)("li",{parentName:"ul"},"Cache policy: Set this to any policy as per your requirements"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Function Associations"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Origin request"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Function type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Lambda@Edge")),(0,i.kt)("li",{parentName:"ul"},'Function ARN: Paste the "Request Handler ARN" value printed by the ',(0,i.kt)("inlineCode",{parentName:"li"},"install.sh")," script"),(0,i.kt)("li",{parentName:"ul"},"Include body: ",(0,i.kt)("inlineCode",{parentName:"li"},"Yes")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Origin response"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Function type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Lambda@Edge")),(0,i.kt)("li",{parentName:"ul"},'Function ARN: Paste the "Response Handler ARN" value printed by the ',(0,i.kt)("inlineCode",{parentName:"li"},"install.sh")," script"))))))),(0,i.kt)("li",{parentName:"ol"},'Click on the "Create behaviour" button to save the configuration.')),(0,i.kt)("p",null,"That's all!\nWithin a few minutes, you should start seeing API catalogs in your Levo dashboard."))}f.isMDXComponent=!0}}]);