"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6800],{3905:function(e,r,t){t.d(r,{Zo:function(){return c},kt:function(){return g}});var o=t(7294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?n(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,o,i=function(e,r){if(null==e)return{};var t,o,i={},n=Object.keys(e);for(o=0;o<n.length;o++)t=n[o],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)t=n[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=o.createContext({}),p=function(e){var r=o.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},c=function(e){var r=p(e.components);return o.createElement(l.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},y=o.forwardRef((function(e,r){var t=e.components,i=e.mdxType,n=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),y=p(t),g=i,m=y["".concat(l,".").concat(g)]||y[g]||u[g]||n;return t?o.createElement(m,a(a({ref:r},c),{},{components:t})):o.createElement(m,a({ref:r},c))}));function g(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var n=t.length,a=new Array(n);a[0]=y;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<n;p++)a[p]=t[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}y.displayName="MDXCreateElement"},1188:function(e,r,t){t.r(r),t.d(r,{assets:function(){return c},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var o=t(3117),i=t(102),n=(t(7294),t(3905)),a=["components"],s={sidebar_position:2,title:"Secure & Organize APIs: Leverage a Private Registry"},l="Use a Private Docker Registry for Kubernetes Installations",p={unversionedId:"guides/general/private-registry",id:"guides/general/private-registry",title:"Secure & Organize APIs: Leverage a Private Registry",description:"To use private images while installing Levo's services in your environment, you need to follow 3 steps:",source:"@site/docs/guides/general/private-registry.md",sourceDirName:"guides/general",slug:"/guides/general/private-registry",permalink:"/guides/general/private-registry",draft:!1,editUrl:"https://github.com/levoai/docs/edit/main/docs/guides/general/private-registry.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Secure & Organize APIs: Leverage a Private Registry"},sidebar:"tutorialSidebar",previous:{title:"Compatibility Check",permalink:"/guides/general/os-compat-check"},next:{title:"Supported Platforms",permalink:"/guides/general/supported-platforms"}},c={},u=[{value:"Copy Levo&#39;s public Docker images into your registry",id:"copy-levos-public-docker-images-into-your-registry",level:2},{value:"Create a secret in your Kubernetes cluster with the credentials to access your private registry",id:"create-a-secret-in-your-kubernetes-cluster-with-the-credentials-to-access-your-private-registry",level:2},{value:"Specify a values file to the Levo Helm chart to use your private registry",id:"specify-a-values-file-to-the-levo-helm-chart-to-use-your-private-registry",level:2},{value:"eBPF Sensor",id:"ebpf-sensor",level:3},{value:"Satellite",id:"satellite",level:3}],y={toc:u};function g(e){var r=e.components,t=(0,i.Z)(e,a);return(0,n.kt)("wrapper",(0,o.Z)({},y,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"use-a-private-docker-registry-for-kubernetes-installations"},"Use a Private Docker Registry for Kubernetes Installations"),(0,n.kt)("p",null,"To use private images while installing Levo's services in your environment, you need to follow 3 steps:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Copy Levo's public Docker images into your registry."),(0,n.kt)("li",{parentName:"ol"},"Create a secret in your Kubernetes cluster with the credentials to access your private registry."),(0,n.kt)("li",{parentName:"ol"},"Specify a values file to the Levo Helm chart to use your private registry.")),(0,n.kt)("h2",{id:"copy-levos-public-docker-images-into-your-registry"},"Copy Levo's public Docker images into your registry"),(0,n.kt)("p",null,"An example bash script to do this for AWS ECR has been provided below. Please modify this script to suit your needs."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'#!/usr/bin/env bash\n\n# Dependencies: yq, helm, awscli, docker\n\nset -e\ntrap "exit" INT\n\nregion="us-west-2"\nregistry="your.registry"\nrepositoryPrefix="${repositoryPrefix:-}" # Optional, replace with your repository prefix, in case you are using a different repository\n\nhelm repo add levoai https://charts.levo.ai || true\nhelm repo update levoai\nimages=($(helm template levoai/levoai-satellite | yq -N \'..|.image? | select(.)\' | sort -u))\nimages+=($(helm template levoai/levoai-ebpf-sensor | yq -N \'..|.image? | select(.)\' | sort -u))\n\nfor image in "${images[@]}"; do\n  src_image=${image#"docker.io/"}\n  if [ -n "$repositoryPrefix" ]; then\n    repo_name=${src_image#*/}\n    dest_image="$registry/$repositoryPrefix/$repo_name"\n  else\n    repo_name=${src_image%:*}\n    dest_image="$registry/$src_image"\n  fi\n  aws ecr describe-repositories --repository-names $repo_name --region $region || aws ecr create-repository --repository-name $repo_name --region $region\n  echo "Copying $src_image to $dest_image"\n  docker buildx imagetools create --tag $dest_image $src_image\ndone\n')),(0,n.kt)("h2",{id:"create-a-secret-in-your-kubernetes-cluster-with-the-credentials-to-access-your-private-registry"},"Create a secret in your Kubernetes cluster with the credentials to access your private registry"),(0,n.kt)("p",null,"Adapt the following command for your private registry:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create secret docker-registry ecr-auth --docker-server=your.registry --docker-username=AWS --docker-password=$(aws ecr get-login-password --region us-west-2)\n")),(0,n.kt)("h2",{id:"specify-a-values-file-to-the-levo-helm-chart-to-use-your-private-registry"},"Specify a values file to the Levo Helm chart to use your private registry"),(0,n.kt)("h3",{id:"ebpf-sensor"},"eBPF Sensor"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"sensor:\n  imageRepo: <your.registry>/levoai/ebpf_sensor\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Note: In case you are using a different repository, please replace ",(0,n.kt)("inlineCode",{parentName:"p"},"levoai/ebpf_sensor")," with the correct repository name.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"sensor:\n  imageRepo: <your.registry>/<your-repository-prefix>/ebpf_sensor\n")),(0,n.kt)("h3",{id:"satellite"},"Satellite"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"global:\n  levoai_config_override:\n    onprem-api:\n      org-id: <id>\n      refresh-token: <token>\n  imageRegistry: <your.registry>\n  imagePullSecrets:\n    - name: ecr-auth\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Note: In case you are using a different repository, please add the following lines to the ",(0,n.kt)("inlineCode",{parentName:"p"},"values.yaml"),".")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"global:\n    busyboxImage: <your.repository-prefix>/busybox\n\nrabbitmq:\n  image:\n    repository: <your.repository-prefix>/rabbitmq\n    tag: <version>\n    \nsatellite:\n  image:\n    repository: <your.repository-prefix>/satellite\n    tag: <version>\n\ntagger:\n  image:\n    repository: <your.repository-prefix>/satellite\n    tag: <version>\n\nlevoai-ion:\n  image:\n    repository: <your.repository-prefix>/satellite\n    tag: <version>\n    \nlevoai-collector:\n  image:\n    repository: <your.repository-prefix>/collector\n    tag: <version>\n\nhaproxy:\n  image:\n    repository: <your.repository-prefix>/haproxy\n    tag: <version>\n")))}g.isMDXComponent=!0}}]);