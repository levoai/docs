"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2453],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),f=o,h=d["".concat(l,".").concat(f)]||d[f]||u[f]||s;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<s;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8281:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=n(3117),o=n(102),s=(n(7294),n(3905)),a=["components"],i={sidebar_position:3},l="Sensor via Docker",c={unversionedId:"install-traffic-capture-sensors/ebpf-sensor/sensor-docker",id:"install-traffic-capture-sensors/ebpf-sensor/sensor-docker",title:"Sensor via Docker",description:"Install on Linux host via Docker",source:"@site/docs/install-traffic-capture-sensors/ebpf-sensor/sensor-docker.md",sourceDirName:"install-traffic-capture-sensors/ebpf-sensor",slug:"/install-traffic-capture-sensors/ebpf-sensor/sensor-docker",permalink:"/install-traffic-capture-sensors/ebpf-sensor/sensor-docker",draft:!1,editUrl:"https://github.com/levoai/docs/edit/main/docs/install-traffic-capture-sensors/ebpf-sensor/sensor-docker.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Sensor on AWS ECS using Terraform",permalink:"/install-traffic-capture-sensors/ebpf-sensor/sensor-aws-ecs-terraform"},next:{title:"Sensor via APT Package",permalink:"/install-traffic-capture-sensors/ebpf-sensor/sensor-apt-package"}},p={},u=[{value:"Install on Linux host via Docker",id:"install-on-linux-host-via-docker",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"1. Install Sensor",id:"1-install-sensor",level:3},{value:"NOTE:",id:"note",level:4},{value:"2. Verify connectivity with Satellite",id:"2-verify-connectivity-with-satellite",level:3}],d={toc:u};function f(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"sensor-via-docker"},"Sensor via Docker"),(0,s.kt)("h2",{id:"install-on-linux-host-via-docker"},"Install on Linux host via Docker"),(0,s.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Docker Engine version ",(0,s.kt)("inlineCode",{parentName:"li"},"18.03.0")," and above"),(0,s.kt)("li",{parentName:"ul"},"Admin (or ",(0,s.kt)("inlineCode",{parentName:"li"},"sudo"),") privileges on the Docker host")),(0,s.kt)("h3",{id:"1-install-sensor"},"1. Install Sensor"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"If you are installing the Satellite and Sensor on the ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"same"))," Linux host, please do ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"NOT"))," use ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost")," as the hostname below. Use the Linux host's ",(0,s.kt)("inlineCode",{parentName:"p"},"IP address"),", or ",(0,s.kt)("inlineCode",{parentName:"p"},"domain name")," instead. This is required as the Sensor runs inside a Docker container, and ",(0,s.kt)("inlineCode",{parentName:"p"},"localhost")," resolves to the Sensor container's IP address, instead of the Linux host.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# Replace '<collector-address>' with the values you noted down from the Satellite install\n#\n# Specify below the 'Application Name' chosen earlier. Do not quote the 'Application Name'\n#\nsudo docker run --restart unless-stopped \\\n  -v /sys/kernel/debug:/sys/kernel/debug -v /proc:/host/proc \\\n  --privileged --detach levoai/ebpf_sensor:0.29.6 \\\n  --host-proc-path /host/proc/ \\\n  --collector-endpoint <collector-address> \\\n  --env <'application-environment'> \\\n  --default-service-name <'Application Name' chosen earlier>\n")),(0,s.kt)("h4",{id:"note"},"NOTE:"),(0,s.kt)("p",null,"The default address for the collector in Docker-based Sensor installations is ",(0,s.kt)("inlineCode",{parentName:"p"},"https://collector.levo.ai"),".\nThis address assumes that Levo is hosting the Satellite for you, and you must also specify an organization ID when starting the sensor (with the ",(0,s.kt)("inlineCode",{parentName:"p"},"--organization-id")," flag).\nIf you wish, you may also host the Satellite yourself and specify the address of the collector in the self-hosted Satellite to direct the Sensor's traffic to it."),(0,s.kt)("h3",{id:"2-verify-connectivity-with-satellite"},"2. Verify connectivity with Satellite"),(0,s.kt)("p",null,"Execute the following command to check for connectivity health:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'# Please specify the actual container name for levoai-sensor below\ndocker logs <levoai-sensor container name> | grep "Initial connection with Collector"\n')),(0,s.kt)("p",null,"If connectivity is healthy, you should see output similar to below."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"2022/06/13 21:15:40 729071  INFO [ebpf_sensor.cpp->main:120]    Initial connection with Collector was successful.\n")),(0,s.kt)("p",null,"Please proceed to the next step, if there are no errors."),(0,s.kt)("br",null))}f.isMDXComponent=!0}}]);