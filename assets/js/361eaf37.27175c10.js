"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2365],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),k=u(n),d=r,m=k["".concat(s,".").concat(d)]||k[d]||p[d]||i;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=k;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},1361:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p}});var a=n(3117),r=n(102),i=(n(7294),n(3905)),l=["components"],o={sidebar_position:3,keywords:["API Security","ZAP","OWASP","Linux","macOS","Windows","API Observability","Kubernetes"]},s="Quickstart on Kubernetes",u={unversionedId:"quickstart/quickstart-kubernetes",id:"quickstart/quickstart-kubernetes",title:"Quickstart on Kubernetes",description:"This quickstart guide will help you install the LevoAI eBPF Sensor on a Kubernetes cluster.",source:"@site/docs/quickstart/quickstart-kubernetes.md",sourceDirName:"quickstart",slug:"/quickstart/quickstart-kubernetes",permalink:"/quickstart/quickstart-kubernetes",draft:!1,editUrl:"https://github.com/levoai/docs/edit/main/docs/quickstart/quickstart-kubernetes.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,keywords:["API Security","ZAP","OWASP","Linux","macOS","Windows","API Observability","Kubernetes"]},sidebar:"tutorialSidebar",previous:{title:"Quickstart on Mac / Laptop",permalink:"/quickstart/quickstart-mac"},next:{title:"Quickstart with Minikube",permalink:"/quickstart/quickstart-minikube"}},c={},p=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Copy <code>Authorization Key</code> from Levo.ai",id:"copy-authorization-key-from-levoai",level:2},{value:"Add Helm Charts Repository",id:"add-helm-charts-repository",level:3},{value:"Add LevoAI Auth Key",id:"add-levoai-auth-key",level:3},{value:"Install Satellite",id:"install-satellite",level:3},{value:"Check satellite connectivity",id:"check-satellite-connectivity",level:3},{value:"Install eBPF Sensor",id:"install-ebpf-sensor",level:3},{value:"Check sensor health",id:"check-sensor-health",level:3}],k={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quickstart-on-kubernetes"},"Quickstart on Kubernetes"),(0,i.kt)("p",null,"This quickstart guide will help you install the LevoAI eBPF Sensor on a Kubernetes cluster."),(0,i.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Kubernetes version >= ",(0,i.kt)("inlineCode",{parentName:"li"},"v1.18.0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://helm.sh/docs/intro/install/"},"Helm v3")," installed and working."),(0,i.kt)("li",{parentName:"ul"},"The Kubernetes cluster API endpoint should be reachable from the machine you are running Helm."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"kubectl")," access to the cluster, with ",(0,i.kt)("inlineCode",{parentName:"li"},"cluster-admin")," permissions."),(0,i.kt)("li",{parentName:"ul"},"At least 4 CPUs"),(0,i.kt)("li",{parentName:"ul"},"At least 8 GB RAM")),(0,i.kt)("h2",{id:"copy-authorization-key-from-levoai"},"Copy ",(0,i.kt)("inlineCode",{parentName:"h2"},"Authorization Key")," from Levo.ai"),(0,i.kt)("p",null,"The Satellite uses an authorization key to access Levo.ai."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://app.levo.ai/login"},"Login")," to Levo.ai."),(0,i.kt)("li",{parentName:"ul"},"Click on your user profile."),(0,i.kt)("li",{parentName:"ul"},"Click on ",(0,i.kt)("inlineCode",{parentName:"li"},"User Settings")),(0,i.kt)("li",{parentName:"ul"},"Click on ",(0,i.kt)("inlineCode",{parentName:"li"},"Keys")," on the left navigation panel"),(0,i.kt)("li",{parentName:"ul"},"Click on ",(0,i.kt)("inlineCode",{parentName:"li"},"Get Satellite Authorization Key"))),(0,i.kt)("p",null,"Copy your authorization key. This key is required in subsequent steps below."),(0,i.kt)("h3",{id:"add-helm-charts-repository"},"Add Helm Charts Repository"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add levoai https://charts.levo.ai && helm repo update levoai\n")),(0,i.kt)("h3",{id:"add-levoai-auth-key"},"Add LevoAI Auth Key"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"export LEVOAI_AUTH_KEY=<'Authorization Key' copied earlier>\n")),(0,i.kt)("h3",{id:"install-satellite"},"Install Satellite"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"helm upgrade --install -n levoai --create-namespace \\\n  --set global.levoai_config_override.onprem-api.refresh-token=$LEVOAI_AUTH_KEY \\\n  levoai-satellite levoai/levoai-satellite \n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Please refer to ",(0,i.kt)("a",{parentName:"p",href:"/install-satellite/satellite-kubernetes"},"install satellite in kubernetes")," for detailed instructions. ")),(0,i.kt)("h3",{id:"check-satellite-connectivity"},"Check satellite connectivity"),(0,i.kt)("p",null,"Execute the following to check for connectivity health:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Please specify the actual pod name for levoai-tagger below\nkubectl -n levoai logs <levoai-tagger pod name> | grep "Ready to process; waiting for messages."\n')),(0,i.kt)("p",null,"If connectivity is healthy, you will see output similar to below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'{"level": "info", "time": "2022-06-07 08:07:22,439", "line": "rabbitmq_client.py:155", "version": "fc628b50354bf94e544eef46751d44945a2c55bc", "module": "/opt/levoai/e7s/src/python/levoai_e7s/satellite/rabbitmq_client.py", "message": "Ready to process; waiting for messages."}\n')),(0,i.kt)("h3",{id:"install-ebpf-sensor"},"Install eBPF Sensor"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Replace 'levoai-haproxy' with the values you noted down from previous step if \n# Sensor was installed on a different cluster than satellite.\n# Use appropriate environment value for levoEnv to segregate API assets in Levo dashboard.\n\nhelm upgrade levoai-sensor levoai/levoai-ebpf-sensor \\\n  --install \\\n  --namespace levoai \\\n  --create-namespace \\\n  # --set sensor.satelliteUrl=levoai-haproxy \\\n  --set sensor.levoEnv=<Application environment>\n")),(0,i.kt)("h3",{id:"check-sensor-health"},"Check sensor health"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Please specify the actual pod name for levoai-sensor below\nkubectl -n levoai logs <levoai-sensor pod name> | grep "Initial connection with Collector"\n')),(0,i.kt)("p",null,"If connectivity is healthy, you should see output similar to below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"2022/06/13 21:15:40 729071  INFO [ebpf_sensor.cpp->main:120]    Initial connection with Collector was successful.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Please contact ",(0,i.kt)("inlineCode",{parentName:"strong"},"support@levo.ai")," if you notice health/connectivity related errors.")))}d.isMDXComponent=!0}}]);