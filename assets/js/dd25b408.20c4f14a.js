"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7766],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1718:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=n(3117),o=n(102),r=(n(7294),n(3905)),i=["components"],l={sidebar_position:6},s="Install Code Analysis Tools",p={unversionedId:"install-code-analysis-tools",id:"install-code-analysis-tools",title:"Install Code Analysis Tools",description:"Prerequisites",source:"@site/docs/install-code-analysis-tools.md",sourceDirName:".",slug:"/install-code-analysis-tools",permalink:"/install-code-analysis-tools",draft:!1,editUrl:"https://github.com/levoai/docs/edit/main/docs/install-code-analysis-tools.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Install Log Parsing Sensors",permalink:"/install-log-parsing-sensors"},next:{title:"Install API Portal",permalink:"/install-api-portal"}},c={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Instructions to setup code-scanning",id:"instructions-to-setup-code-scanning",level:2},{value:"Scan Code and identify REST API Endpoints",id:"scan-code-and-identify-rest-api-endpoints",level:3},{value:"Scan project directory to fetch and import OpenAPI/Swagger specs",id:"scan-project-directory-to-fetch-and-import-openapiswagger-specs",level:3},{value:"Github Action",id:"github-action",level:3},{value:"Prerequisites",id:"prerequisites-1",level:4},{value:"Action Configuration",id:"action-configuration",level:4},{value:"Job Outputs",id:"job-outputs",level:4}],d={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"install-code-analysis-tools"},"Install Code Analysis Tools"),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Docker is installed on your machine."),(0,r.kt)("li",{parentName:"ul"},"Ensure that you are able to launch and use Docker containers, and network connectivity works."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"api.levo.ai")," is reachable from the host machine")),(0,r.kt)("h2",{id:"instructions-to-setup-code-scanning"},"Instructions to setup code-scanning"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/security-testing/test-laptop"},"Install Levo CLI"),", which contains the commands to scan code"),(0,r.kt)("li",{parentName:"ul"},"Once the CLI is installed, you can",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#scan-code-and-identify-rest-api-endpoints"},"Scan your code and identify REST API endpoints.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#scan-project-directory-to-fetch-and-import-openapiswagger-specs"},"Scan the project directory to look for existing OpenAPI/Swagger specs."))))),(0,r.kt)("h3",{id:"scan-code-and-identify-rest-api-endpoints"},"Scan Code and identify REST API Endpoints"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Login to Levo CLI",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"levo login\n"))),(0,r.kt)("li",{parentName:"ul"},"Enter the CLI authorization key and select the organization."),(0,r.kt)("li",{parentName:"ul"},"Once logged in, go to the project directory where you want to run code-scanning",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"cd <your_project_directory>\n"))),(0,r.kt)("li",{parentName:"ul"},"Inside the project directory, run the below CLI command",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"levo scan code \\\n    --dir <relative path to directory you wish to scan> \\\n    --app-name <name of the app you wish to see on Dashboard> \\\n    --env-name <the environment to which your app should belong>\n"))),(0,r.kt)("li",{parentName:"ul"},"In the ",(0,r.kt)("inlineCode",{parentName:"li"},"--dir")," option, you can specify the relative subdirectory path (",(0,r.kt)("inlineCode",{parentName:"li"},"./path/to/sub-directory"),") if you want to scan only a part of the project, or simply DOT (",(0,r.kt)("inlineCode",{parentName:"li"},"."),") for the current directory."),(0,r.kt)("li",{parentName:"ul"},"If there are REST endpoints in the code, they will be imported to the Levo Dashboard, under the given app-name.")),(0,r.kt)("h3",{id:"scan-project-directory-to-fetch-and-import-openapiswagger-specs"},"Scan project directory to fetch and import OpenAPI/Swagger specs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Login to Levo CLI",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"levo login\n"))),(0,r.kt)("li",{parentName:"ul"},"Enter the CLI authorization key and select the organization."),(0,r.kt)("li",{parentName:"ul"},"Once logged in, go to the project directory where you want to scan for openAPI specs.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"cd <your_project_directory>\n"))),(0,r.kt)("li",{parentName:"ul"},"Inside the project directory, run the below CLI command",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"levo scan schema \\\n    --dir <relative path to directory you want to scan>  \\\n    --env-name <the environment to which your app should belong>\n"))),(0,r.kt)("li",{parentName:"ul"},"In the ",(0,r.kt)("inlineCode",{parentName:"li"},"--dir")," option, you can specify the relative subdirectory path (",(0,r.kt)("inlineCode",{parentName:"li"},"./path/to/sub-directory"),") if you want to scan only a part of the project, or simply DOT (",(0,r.kt)("inlineCode",{parentName:"li"},"."),") for the current directory."),(0,r.kt)("li",{parentName:"ul"},"If there are OpenAPI/Swagger specs in the project directory, they will be imported to Levo Dashboard."),(0,r.kt)("li",{parentName:"ul"},"The App Name will be the same as the title of the OpenAPI/Swagger spec.")),(0,r.kt)("h3",{id:"github-action"},"Github Action"),(0,r.kt)("h4",{id:"prerequisites-1"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An account on Levo.ai"),(0,r.kt)("li",{parentName:"ul"},"An application code repository on GitHub (Currently Java and Python is supported)")),(0,r.kt)("h4",{id:"action-configuration"},"Action Configuration"),(0,r.kt)("p",null,"The pre-built action for executing ",(0,r.kt)("inlineCode",{parentName:"p"},"Scan Code")," requires the following configuration settings:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"authorization-key")," : Specify your CLI authorization key here. Refer to ",(0,r.kt)("a",{parentName:"p",href:"/integrations/common-tasks#generating-cli-authorization-keys"},"Generating CLI Authorization Keys")," for instructions on fetching your key")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"organization-id")," : Specify your ",(0,r.kt)("em",{parentName:"p"},"Organization ID")," here. Refer to ",(0,r.kt)("a",{parentName:"p",href:"/integrations/common-tasks#accessing-organization-ids"},"Accessing Organization IDs")," for instructions on fetching your ID")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"saas-url")," : The URL of the Levo SaaS instance. Default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"https://api.levo.ai"),". For India, use ",(0,r.kt)("inlineCode",{parentName:"p"},"https://api.india-1.levo.ai"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"app-name")," : The name of the application you want to see on the Levo Dashboard")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"env-name")," : This is an ",(0,r.kt)("strong",{parentName:"p"},"OPTIONAL")," setting. The environment to which your app should belong. Default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"staging"),"."))),(0,r.kt)("p",null,"Here is a sample ",(0,r.kt)("em",{parentName:"p"},"Scan Code Action")," with its configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-YAML"},"- name: Levo Scan Repo\n  uses: levoai/actions/scan@v2.3.0\n  with:\n    # Authorization key required to execute the Levo CLI. Please refer to https://app.levo.ai/settings/keys to get your authorization key.\n    authorization-key: <'Specify your CLI authorization key here'>\n\n    # The ID of your organization in Levo dashboard. Please refer to https://app.levo.ai/settings/organization to get your organization id.\n    organization-id: <'Specify your organization ID here'>\n\n    # [OPTIONAL] The environment to which your app should belong. Default: staging.\n    saas-url: \"https://api.dev.levo.ai\"\n\n    # The name of the application you want to see on the Levo Dashboard.\n    app-name: <'Application Name here'>\n\n    # [OPTIONAL] The environment to which your app should belong. Default: staging.\n    env-name: <'Environment Name here'>\n")),(0,r.kt)("h4",{id:"job-outputs"},"Job Outputs"),(0,r.kt)("p",null,"This pre-built ",(0,r.kt)("em",{parentName:"p"},"Action")," produces the below ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs"},"Outputs"),", which can be referenced by downstream Actions/Jobs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-YAML"},"outputs:\n  scan-success: <'true/false'>\n")))}m.isMDXComponent=!0}}]);