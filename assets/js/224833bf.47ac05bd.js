"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[134],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=c(n),h=o,m=f["".concat(i,".").concat(h)]||f[h]||u[h]||a;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=f;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7818:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=n(3117),o=n(102),a=(n(7294),n(3905)),l=["components"],s={sidebar_position:1},i="Sensor on Kubernetes",c={unversionedId:"install-traffic-capture-sensors/ebpf-sensor/sensor-kubernetes",id:"install-traffic-capture-sensors/ebpf-sensor/sensor-kubernetes",title:"Sensor on Kubernetes",description:"Install on Kubernetes",source:"@site/docs/install-traffic-capture-sensors/ebpf-sensor/sensor-kubernetes.md",sourceDirName:"install-traffic-capture-sensors/ebpf-sensor",slug:"/install-traffic-capture-sensors/ebpf-sensor/sensor-kubernetes",permalink:"/install-traffic-capture-sensors/ebpf-sensor/sensor-kubernetes",draft:!1,editUrl:"https://github.com/levoai/docs/edit/main/docs/install-traffic-capture-sensors/ebpf-sensor/sensor-kubernetes.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Install eBPF Sensor",permalink:"/install-traffic-capture-sensors/ebpf-sensor/"},next:{title:"Sensor on AWS ECS using Terraform",permalink:"/install-traffic-capture-sensors/ebpf-sensor/sensor-aws-ecs-terraform"}},p={},u=[{value:"Install on Kubernetes",id:"install-on-kubernetes",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"1. Install levoai Helm repo",id:"1-install-levoai-helm-repo",level:3},{value:"2. Create <code>levoai</code> namespace &amp; install Sensor",id:"2-create-levoai-namespace--install-sensor",level:3},{value:"3. Verify connectivity with Satellite",id:"3-verify-connectivity-with-satellite",level:3},{value:"i. Check Sensor health",id:"i-check-sensor-health",level:4},{value:"ii. Check connectivity",id:"ii-check-connectivity",level:4},{value:"NOTE:",id:"note",level:4}],f={toc:u};function h(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sensor-on-kubernetes"},"Sensor on Kubernetes"),(0,a.kt)("h2",{id:"install-on-kubernetes"},"Install on Kubernetes"),(0,a.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Kubernetes version >= v1.18.0"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://helm.sh/docs/intro/install/"},"Helm v3")," installed and working."),(0,a.kt)("li",{parentName:"ul"},"The Kubernetes cluster API endpoint should be reachable from the machine you are running Helm."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"kubectl")," access to the cluster, with ",(0,a.kt)("inlineCode",{parentName:"li"},"cluster-admin")," permissions.")),(0,a.kt)("h3",{id:"1-install-levoai-helm-repo"},"1. Install levoai Helm repo"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add levoai https://charts.levo.ai && helm repo update\n")),(0,a.kt)("h3",{id:"2-create-levoai-namespace--install-sensor"},"2. Create ",(0,a.kt)("inlineCode",{parentName:"h3"},"levoai")," namespace & install Sensor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Replace 'hostname|IP' & 'port' with the values you noted down from the Satellite install\n# If Sensor is installed on same cluster as Satellite, use 'levoai-collector.levoai:4317'\n# Specify below the 'Application Name' chosen earlier.\n#\nhelm upgrade levoai-sensor levoai/levoai-ebpf-sensor \\\n  --install \\\n  --namespace levoai \\\n  --create-namespace \\\n  --set sensor.config.default-service-name=<'Application Name' chosen earlier> \\\n  --set sensor.config.collector-endpoint=<hostname|IP:port> \\\n  --set sensor.config.env=<'Application environment'>\n")),(0,a.kt)("h3",{id:"3-verify-connectivity-with-satellite"},"3. Verify connectivity with Satellite"),(0,a.kt)("h4",{id:"i-check-sensor-health"},"i. Check Sensor health"),(0,a.kt)("p",null,"Check the health of the Sensor by executing the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n levoai get pods | grep levoai-sensor\n")),(0,a.kt)("p",null,"If the Sensor is healthy, you should see output similar to below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"levoai-sensor-747fb4aaa9-gv8g9   1/1     Running   0             1m8s\n")),(0,a.kt)("h4",{id:"ii-check-connectivity"},"ii. Check connectivity"),(0,a.kt)("p",null,"Execute the following command to check for connectivity health:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# Please specify the actual pod name for levoai-sensor below\nkubectl -n levoai logs <levoai-sensor pod name> | grep "Initial connection with Collector"\n')),(0,a.kt)("p",null,"If connectivity is healthy, you should see output similar to below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"2022/06/13 21:15:40 729071  INFO [ebpf_sensor.cpp->main:120]    Initial connection with Collector was successful.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Please contact ",(0,a.kt)("inlineCode",{parentName:"strong"},"support@levo.ai")," if you notice health/connectivity related errors.")),(0,a.kt)("h4",{id:"note"},"NOTE:"),(0,a.kt)("p",null,"The default address for the collector in helm installations is ",(0,a.kt)("inlineCode",{parentName:"p"},"levoai-collector:4317"),".\nThis address assumes that the Satellite is installed in the same cluster (and namespace) as the Sensor.\nIf you wish to, you may also request Levo to host the Satellite for you. In this case, you will need to set the ",(0,a.kt)("inlineCode",{parentName:"p"},"collector-endpoint")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"https://collector.levo.ai")," and specify an organization ID (",(0,a.kt)("inlineCode",{parentName:"p"},"organization-id"),") via helm values."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"helm upgrade --set sensor.config.env=<your-application-environment> --set sensor.config.collector-endpoint=https://collector.levo.ai --set sensor.config.organization-id=<your-org-id> levoai-sensor levoai/levoai-ebpf-sensor -n levoai\n")),(0,a.kt)("p",null,"Please proceed to the next step, if there are no errors."),(0,a.kt)("br",null))}h.isMDXComponent=!0}}]);