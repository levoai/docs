"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6159],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=u(t),d=a,m=f["".concat(s,".").concat(d)]||f[d]||p[d]||i;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},1262:function(e,n,t){t.d(n,{Z:function(){return i}});var r=t(7294),a=t(2389);function i(e){var n=e.children,t=e.fallback;return(0,a.Z)()?r.createElement(r.Fragment,null,null==n?void 0:n()):null!=t?t:null}},4232:function(e,n,t){t.r(n),t.d(n,{ConfigurationValues:function(){return m},SensorConfigFile:function(){return d},assets:function(){return p},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return f}});var r=t(3117),a=t(102),i=(t(7294),t(3905)),o=t(1262),l=["components"],s={sidebar_position:2},u="Manage Sensor Configuration",c={unversionedId:"api-observability/common-tasks/sensor/sensor-configuration",id:"api-observability/common-tasks/sensor/sensor-configuration",title:"Manage Sensor Configuration",description:"The Sensor comes pre-configured with appropriate defaults to capture API Traffic (HTTP) from your applications.",source:"@site/docs/api-observability/common-tasks/sensor/sensor-configuration.mdx",sourceDirName:"api-observability/common-tasks/sensor",slug:"/api-observability/common-tasks/sensor/sensor-configuration",permalink:"/api-observability/common-tasks/sensor/sensor-configuration",draft:!1,editUrl:"https://github.com/levoai/docs/edit/main/docs/api-observability/common-tasks/sensor/sensor-configuration.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Sensor Lifecycle Management",permalink:"/api-observability/common-tasks/sensor/sensor-mgmt"},next:{title:"API Traffic Capture Filters",permalink:"/api-observability/common-tasks/sensor/filter-traffic"}},p={},f=[{value:"Configuration File Format",id:"configuration-file-format",level:2},{value:"Factory Settings",id:"factory-settings",level:2},{value:"Default Application Name",id:"default-application-name",level:2},{value:"Satellite Settings",id:"satellite-settings",level:2},{value:"Process &amp; IP Filters",id:"process--ip-filters",level:2},{value:"URL Filters",id:"url-filters",level:2},{value:"Kubernetes Pod Filters",id:"kubernetes-pod-filters",level:2},{value:"Applying Configuration Settings",id:"applying-configuration-settings",level:2},{value:"Running on Kubernetes",id:"running-on-kubernetes",level:3},{value:"Running via Docker",id:"running-via-docker",level:3},{value:"Running on Linux Host",id:"running-on-linux-host",level:3}];function d(){return(0,i.kt)(o.Z,{fallback:(0,i.kt)("div",null,"Loading..."),mdxType:"BrowserOnly"},(function(){return(0,i.kt)("a",{href:window.location.protocol+"//"+window.location.host+"/artifacts/sensor/config.yml",download:!0}," YAML configuration file")}))}function m(){return(0,i.kt)(o.Z,{fallback:(0,i.kt)("div",null,"Loading..."),mdxType:"BrowserOnly"},(function(){return(0,i.kt)("a",{href:window.location.protocol+"//"+window.location.host+"/artifacts/sensor/config-values.yml",download:!0}," Configuration Values")}))}var g={toc:f,SensorConfigFile:d,ConfigurationValues:m};function h(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"manage-sensor-configuration"},"Manage Sensor Configuration"),(0,i.kt)("p",null,"The Sensor comes pre-configured with appropriate defaults to capture API Traffic (HTTP) from your applications."),(0,i.kt)("p",null,"The Sensor can be customized via a ",(0,i.kt)(d,{mdxType:"SensorConfigFile"}),". Examples of customization include, a) granular filtering of API traffic being captured, b) enabling debugging, c) performance tuning, etc."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#configuration-file-format"},"Configuration File Format")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#factory-settings"},"Factory Settings")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#default-application-name"},"Default Application Name")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#satellite-settings"},"Satellite Settings")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#process--ip-filters"},"Process & IP Filters")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#url-filters"},"URL Filters")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#kubernetes-pod-filters"},"Kubernetes Pod Filters")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#applying-configuration-settings"},"Applying Configuration Settings"))),(0,i.kt)("br",null),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"configuration-file-format"},"Configuration File Format"),(0,i.kt)("p",null,"The YAML configuration file (shown below) has six major sections: 1) Factory Settings, 2) Default Application Name, 3) Satellite Settings, 4) Process Filters, 5) IP Filters, & 6) URL Filters."),(0,i.kt)("p",null,"Sensors running on Kubernetes have an additional section called ",(0,i.kt)("inlineCode",{parentName:"p"},"Kubernetes Pod Filters"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"##############################################################################################\n# eBPF Sensor Configuration Settings (YAML Format)\n# Copyright: Levo Inc, 2022\n##############################################################################################\n\n# --------------------------------------------------------------------------------------------\n# Factory Settings: DO NOT MODIFY\n# --------------------------------------------------------------------------------------------\n\n# --------------------------------------------------------------------------------------------\n\n# --------------------------------------------------------------------------------------------\n# Default Application Name:\n# --------------------------------------------------------------------------------------------\n# Auto discovered API endpoints and their OpenAPI specifications are show in the API Catalog\n# grouped under this application name. The application name helps segregate and group API\n# endpoints from different environments.\n#\n# In Kubernetes and other container orchestration systems, where meta data about applications\n# (that have been deployed) is readily available, auto discovered API endpoints are attributed\n# to the appropriate services automatically. The default application will be used as a fallback,\n# if the service name meta data in unavailable.\n#\ndefault-service-name: my-api-application\n# --------------------------------------------------------------------------------------------\n\n\n# --------------------------------------------------------------------------------------------\n# Satellite Settings:\n# --------------------------------------------------------------------------------------------\n# host:port for the collector service receiving the Sensor's API traces.\ncollector-endpoint: localhost:4317\n# --------------------------------------------------------------------------------------------\n\n\n# --------------------------------------------------------------------------------------------\n# Process Filters: process command names/IDs to monitor & capture API traffic.\n# --------------------------------------------------------------------------------------------\n## Restrict API traffic capture to specific processes identified by their command names below\nmonitored-commands:\n#  - <process command name. Example: nginx>\n#  - <process command name. Example: python3>\n\n## Restrict API traffic capture to specific processes identified by their PIDs below\nmonitored-pids:\n- <pid. Example: 123>\n- <pid. Example: 45>\n# --------------------------------------------------------------------------------------------\n\n\n# --------------------------------------------------------------------------------------------\n# IP Filters: IP/Port/Network address based granular filtering of API traffic.\n# --------------------------------------------------------------------------------------------\nip-filter-list:\n  default-policy: <accept|drop> # Specifies default behavior which can be overridden by 'entries' below\n  entries: # Specific 'entries' can override the default policy\n    - policy: <accept|drop>\n      <host-ports|peer-ports|host-network|peer-network>: <appropriate value>\n# --------------------------------------------------------------------------------------------\n\n\n# --------------------------------------------------------------------------------------------\n# URL Filters: API parameter based granular filtering of API traffic.\n# --------------------------------------------------------------------------------------------\nurl-filter:\n  # 'default-url-action' specifies the default behavior which can be overridden by 'rules' below.\n  # This is a mandatory attribute that needs to be specified in order to use URL filters.\n  default-url-action: <trace|ignore>\n  #\n  # YAML array of one or more rules. Order of rules matters during evaluation\n  rules:\n    # 'action' is mandatory. At least one of 'methods', or 'request-uri', or 'host'\n    # MUST be specified for each rule entry\n    - action: <trace|ignore>\n      #\n      # YAML array list of one or more (API operations) methods: GET, POST, PUT, DELETE\n      # Example: [GET], or [GET, POST, PUT, DELETE]\n      methods: <[GET, POST, PUT, DELETE]>\n      #\n      # URI of the API endpoint. Can be a (Perl format) regex pattern. Example: /foo/bar, or /bar/*\n      request-uri: <URI>\n      #\n      # Hostname of the API endpoint and optionally the port. Example: levo.ai:8888, or levo.ai\n      host: <hostname[:port]>\n      #\n# --------------------------------------------------------------------------------------------\n\n# --------------------------------------------------------------------------------------------\n# Kubernetes Pod Filters: Kubernetes pod properties based granular filtering of API traffic.\n# --------------------------------------------------------------------------------------------\n# Pod Filters enable granular capture of API traffic based on Kubernetes Pod attributes.\n# Rules should ideally be in decreasing order of specificity.\n# The first rule to match a pod's properties will be used.\n#\n# --------------------------------------------------------------------------------------------\n#\nk8s-pod-filter-list:\n  default-policy: <trace|ignore>\n  rules:\n    - policy: <trace|ignore>\n      namespace: <name or regex pattern>\n      # Optional owner reference of the Pod\n      owner-reference:\n        kind: <Node|Deployment>\n        name: <name or regex pattern>\n# --------------------------------------------------------------------------------------------\n")),(0,i.kt)("br",null),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"factory-settings"},"Factory Settings"),(0,i.kt)("p",null,"These settings control logging, debugging, and performance tuning functions. ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"DO NOT"))," modify these settings, unless specifically asked by Levo Support. "),(0,i.kt)("br",null),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"default-application-name"},"Default Application Name"),(0,i.kt)("p",null,"Auto discovered API endpoints and their OpenAPI specifications are show in the ",(0,i.kt)("a",{parentName:"p",href:"/security-contract-testing/concepts/api-catalog/"},"API Catalog"),", grouped under an application name. The application name helps segregate and group API endpoints from different environments, similar to how file folders work in an operating system. "),(0,i.kt)("br",null),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"satellite-settings"},"Satellite Settings"),(0,i.kt)("p",null,"These are settings related to the Satellite, such as the Satellite's listen port, etc."),(0,i.kt)("br",null),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"process--ip-filters"},"Process & IP Filters"),(0,i.kt)("p",null,"These settings allow granular control over what API traffic is captured by the Sensor. Please see detailed section on ",(0,i.kt)("a",{parentName:"p",href:"/api-observability/common-tasks/sensor/filter-traffic"},"API Traffic Capture Filters"),". "),(0,i.kt)("br",null),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"url-filters"},"URL Filters"),(0,i.kt)("p",null,"These settings allow granular control over what API traffic is captured by the Sensor, based on API parameter filters. Please see detailed section on ",(0,i.kt)("a",{parentName:"p",href:"/api-observability/common-tasks/sensor/filter-traffic#configure-url-filters"},"API Traffic Capture Filters"),". "),(0,i.kt)("br",null),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"kubernetes-pod-filters"},"Kubernetes Pod Filters"),(0,i.kt)("p",null,"These settings allow granular control over what API traffic is captured by the Sensor,\nbased on Kubernetes meta data (e.g. namespace name, deployment name, etc)."),(0,i.kt)("p",null,"Please see detailed section on ",(0,i.kt)("a",{parentName:"p",href:"/api-observability/common-tasks/sensor/filter-traffic#configure-kubernetes-pod-filters"},"API Traffic Capture Filters"),". "),(0,i.kt)("br",null),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"applying-configuration-settings"},"Applying Configuration Settings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#running-on-kubernetes"},"Running on Kubernetes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#running-via-docker"},"Running via Docker")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#running-on-linux-host"},"Running on Linux Host"))),(0,i.kt)("h3",{id:"running-on-kubernetes"},"Running on Kubernetes"),(0,i.kt)("p",null,"Configuration is specified via a ",(0,i.kt)("a",{parentName:"p",href:"https://helm.sh/docs/chart_template_guide/values_files/"},"Helm Values")," file."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Modify the default ",(0,i.kt)(m,{mdxType:"ConfigurationValues"})," file to suit your requirements."),(0,i.kt)("li",{parentName:"ul"},"Save the configuration values file to your current working directory."),(0,i.kt)("li",{parentName:"ul"},"Note down the Satellite's ",(0,i.kt)("inlineCode",{parentName:"li"},"host:port")," address information."),(0,i.kt)("li",{parentName:"ul"},"Apply the new configuration by executing the below command from the directory where you saved the ",(0,i.kt)("inlineCode",{parentName:"li"},"config-values.yml"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Replace 'hostname|IP' & 'port' with the values you noted down from the Satellite install\n# If Sensor is installed on same cluster as Satellite, use 'levoai-collector.levoai:4317'\n#\n# Specify the 'Application Name' chosen earlier in the config-values.yml file.\n#\nhelm upgrade levoai-sensor levoai/levoai-ebpf-sensor \\\n  --install \\\n  --namespace levoai \\\n  --create-namespace \\\n  --set sensor.otel.grpcEndpoint=<hostname|IP:port> \\\n  --values config-values.yml\n")),(0,i.kt)("p",null,"You may also specify specific configuration values using ",(0,i.kt)("inlineCode",{parentName:"p"},"helm --set"),". For example,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'helm upgrade levoai-sensor levoai/levoai-ebpf-sensor \\\n  --install \\\n  --namespace levoai \\\n  --create-namespace \\\n  --set sensor.config.default-service-name="my-test-app-k8s-c101" \\\n  --set "sensor.config.monitored-commands={python3,java}"\n')),(0,i.kt)("p",null,"Please check the Sensor logs to ensure that the specified configuration values do not have any syntax errors, and the Sensor is running with the applied configuration."),(0,i.kt)("h3",{id:"running-via-docker"},"Running via Docker"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Modify the default ",(0,i.kt)(d,{mdxType:"SensorConfigFile"})," to suit your requirements."),(0,i.kt)("li",{parentName:"ul"},"Save the configuration file to your current working directory."),(0,i.kt)("li",{parentName:"ul"},"Shutdown/Uninstall the Sensor if running."),(0,i.kt)("li",{parentName:"ul"},"Note down the Satellite's ",(0,i.kt)("inlineCode",{parentName:"li"},"host:port")," address information."),(0,i.kt)("li",{parentName:"ul"},"Reinstall the Sensor by executing the below command from the directory where you saved ",(0,i.kt)("inlineCode",{parentName:"li"},"config.yml"),". ",(0,i.kt)("inlineCode",{parentName:"li"},"config.yml")," is mounted into the Sensor container as read only.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Replace 'hostname|IP' & 'port' with the values you noted down from the Satellite install\nsudo docker run --restart unless-stopped \\\n  -v /sys/kernel/debug:/sys/kernel/debug -v /proc:/host/proc \\\n  -v $PWD/config.yml:/etc/levo/sensor/config.yaml:ro \\\n  --privileged --detach \\\n  levoai/ebpf_sensor:latest \\\n  --host-proc-path /host/proc \\\n  --collector-endpoint <hostname|IP:port> \\\n  --default-service-name <'Application Name' chosen earlier>\n")),(0,i.kt)("p",null,"Please check the Sensor logs to ensure the configuration file does not have any syntax errors, and the Sensor is running with the applied configuration."),(0,i.kt)("h3",{id:"running-on-linux-host"},"Running on Linux Host"),(0,i.kt)("p",null,"Make your modifications to ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/levo/sensor/config.yaml")," and save the file. ",(0,i.kt)("strong",{parentName:"p"},"Restart")," the sensor for the settings to take effect."),(0,i.kt)("p",null,"Please check the Sensor logs to ensure the configuration file does not have any syntax errors, and the Sensor is running with the applied configuration."))}h.isMDXComponent=!0}}]);