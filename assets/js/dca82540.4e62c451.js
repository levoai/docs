"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9952],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=a.createContext({}),l=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),h=i,f=m["".concat(u,".").concat(h)]||m[h]||c[h]||r;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2076:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c}});var a=n(3117),i=n(102),r=(n(7294),n(3905)),o=["components"],s={sidebar_position:2},u="GitHub Action",l={unversionedId:"security-testing/github-action",id:"security-testing/github-action",title:"GitHub Action",description:"Levo's security/contract tests can be embedded in quality gates via GitHub Actions.",source:"@site/docs/security-testing/github-action.md",sourceDirName:"security-testing",slug:"/security-testing/github-action",permalink:"/security-testing/github-action",draft:!1,editUrl:"https://github.com/levoai/docs/edit/main/docs/security-testing/github-action.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Levo CLI Command Reference",permalink:"/security-testing/test-laptop/levo-cli-command-reference"},next:{title:"Jenkins Plugin",permalink:"/security-testing/jenkins-plugin"}},p={},c=[{value:"Execute Test Plans Via Actions",id:"execute-test-plans-via-actions",level:3},{value:"Prerequisites",id:"prerequisites",level:4},{value:"Action Configuration",id:"action-configuration",level:4},{value:"Job Outputs",id:"job-outputs",level:4},{value:"Execute Standalone Schema Conformance Tests (aka Contract Tests) Via Actions",id:"execute-standalone-schema-conformance-tests-aka-contract-tests-via-actions",level:3},{value:"Prerequisites",id:"prerequisites-1",level:4},{value:"Action Configuration",id:"action-configuration-1",level:4},{value:"Job Outputs",id:"job-outputs-1",level:4}],m={toc:c};function h(e){var t=e.components,s=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"github-action"},"GitHub Action"),(0,r.kt)("p",null,"Levo's security/contract tests can be embedded in quality gates via ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions"},"GitHub Actions"),"."),(0,r.kt)("p",null,"Below are examples of embedding Levo's autogenerated tests in GitHub CI/CD via pre-built actions. You have two choices."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#execute-test-plans-via-actions"},"Execute Test Plans")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#execute-standalone-schema-conformance-tests-aka-contract-tests-via-actions"},"Execute Standalone Contract Tests"))),(0,r.kt)("h3",{id:"execute-test-plans-via-actions"},"Execute Test Plans Via Actions"),(0,r.kt)("h4",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Forever Free Account on Levo.ai"),(0,r.kt)("li",{parentName:"ul"},"A runnable Levo ",(0,r.kt)("a",{parentName:"li",href:"/guides/security-testing/concepts/test-plans"},"Test Plan"))),(0,r.kt)("h4",{id:"action-configuration"},"Action Configuration"),(0,r.kt)("p",null,"The pre-built action for executing ",(0,r.kt)("inlineCode",{parentName:"p"},"Test Plans")," requires the following configuration settings:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"authorization-key")," : Specify your CLI authorization key here. Refer to ",(0,r.kt)("a",{parentName:"p",href:"/integrations/common-tasks#generating-cli-authorization-keys"},"Generating CLI Authorization Keys")," for instructions on fetching your key")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"organization-id")," : Specify your ",(0,r.kt)("em",{parentName:"p"},"Organization ID")," here. Refer to ",(0,r.kt)("a",{parentName:"p",href:"/integrations/common-tasks#accessing-organization-ids"},"Accessing Organization IDs")," for instructions on fetching your ID")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"target")," : The base URL of the Application/API under test")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"plan")," : Specify the LRN of your Levo Test Plan (from the Levo console) here. The LRN uniquely identifies the Test Plan to execute"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"LRN",src:n(4768).Z,width:"3560",height:"1094"}))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"base64_env")," : This is an ",(0,r.kt)("strong",{parentName:"p"},"OPTIONAL")," setting."),(0,r.kt)("p",{parentName:"li"},"If you are using an ",(0,r.kt)("a",{parentName:"p",href:"/guides/security-testing/test-your-app/test-app-security/data-driven/configure-env-yml"},"environment file")," to define authentication details, you add the contents of the file here in BASE64 encoded format.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"report")," : This is an ",(0,r.kt)("strong",{parentName:"p"},"OPTIONAL")," setting."),(0,r.kt)("p",{parentName:"li"},"This setting controls the reporting of test results to the Levo Cloud. If you do not want to send test results to the Levo Cloud, set this to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"cli_extra_args")," : This is an ",(0,r.kt)("strong",{parentName:"p"},"OPTIONAL")," setting."),(0,r.kt)("p",{parentName:"li"},"Use this setting to pass extra CLI arguments like headers or the verbosity level. Please use ",(0,r.kt)("inlineCode",{parentName:"p"},"\\\\\\\u02dd")," to escape quotes."),(0,r.kt)("p",{parentName:"li"},"E.g. ",(0,r.kt)("inlineCode",{parentName:"p"},'cli_extra_args: "-H \\\\\\"Authorization: Bearer 1234\\\\\\" --verbosity INFO"')))),(0,r.kt)("p",null,"Here is a sample ",(0,r.kt)("em",{parentName:"p"},"Test Plan Action")," with its configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-YAML"},"- uses: levoai/actions/test-plan@v1-beta\n  with:\n    # Authorization key required to execute the Levo CLI. Please refer to https://app.levo.ai/settings/keys to get your authorization key.\n    authorization-key: <'Specify your CLI authorization key here'>\n\n    # The ID of your organization in Levo dashboard. Please refer to https://app.levo.ai/settings/organization to get your organization id.\n    organization-id: <'Specify your organization ID here'>\n\n    # The base URL of the Application/API under test.\n    target: <'Specify the target base URL here'>\n\n    # Test plan LRN. You can get this value from the test plan section in the Levo SaaS console.\n    plan: <'Specify your Test Plan's LRN here'>\n\n    # [OPTIONAL] Base64 encoded environment file content.\n    base64_env: <'The contents of your environment file as a BASE64 encoded string here'>\n\n    # [OPTIONAL] If you do not want to report the result of this execution to the Levo cloud, set this value to false. Default: true.\n    report: <true|false>\n\n    # [OPTIONAL] Use this option to pass extra CLI arguments like headers or verbosity.\n    # Please use \\\\\\\u02dd to escape quotes.\n    # E.g. cli_extra_args: \"-H \\\\\\\"Authorization: Bearer 1234\\\\\\\" --verbosity INFO\"\n    cli_extra_args: <\"Specify any extra arguments here\">\n")),(0,r.kt)("h4",{id:"job-outputs"},"Job Outputs"),(0,r.kt)("p",null,"This pre-built ",(0,r.kt)("em",{parentName:"p"},"Action")," produces the below ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs"},"Outputs"),", which can be referenced by downstream Actions/Jobs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-YAML"},"outputs:\n  success:\n    description: '# of successful test cases'\n  failed:\n    description: '# of failed test cases'\n  skipped:\n    description: '# of skipped test cases'\n")),(0,r.kt)("h3",{id:"execute-standalone-schema-conformance-tests-aka-contract-tests-via-actions"},"Execute Standalone Schema Conformance Tests (aka Contract Tests) Via Actions"),(0,r.kt)("h4",{id:"prerequisites-1"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Forever Free Account on Levo.ai")),(0,r.kt)("h4",{id:"action-configuration-1"},"Action Configuration"),(0,r.kt)("p",null,"The pre-built action for executing standalone ",(0,r.kt)("inlineCode",{parentName:"p"},"Schema Conformance Tests")," requires the following configuration settings:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"authorization-key")," : Specify your CLI authorization key here. Refer to ",(0,r.kt)("a",{parentName:"p",href:"/integrations/common-tasks#generating-cli-authorization-keys"},"Generating CLI Authorization Keys")," for instructions on fetching your key")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"organization-id")," : Specify your ",(0,r.kt)("em",{parentName:"p"},"Organization ID")," here. Refer to ",(0,r.kt)("a",{parentName:"p",href:"/integrations/common-tasks#accessing-organization-ids"},"Accessing Organization IDs")," for instructions on fetching your ID")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"schema")," : The URL or file path of the (under test) API's OpenAPI schema (YAML or JSON format)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"target")," : The base URL of the Application/API under test")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"report")," : This is an ",(0,r.kt)("strong",{parentName:"p"},"OPTIONAL")," setting."),(0,r.kt)("p",{parentName:"li"},"This setting controls the reporting of test results to the Levo Cloud. If you do not want to send test results to the Levo Cloud, set this to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"cli_extra_args")," : This is an ",(0,r.kt)("strong",{parentName:"p"},"OPTIONAL")," setting."),(0,r.kt)("p",{parentName:"li"},"Use this setting to pass extra CLI arguments like headers or the verbosity level. Please use ",(0,r.kt)("inlineCode",{parentName:"p"},"\\\\\\\u02dd")," to escape quotes."),(0,r.kt)("p",{parentName:"li"},"E.g. ",(0,r.kt)("inlineCode",{parentName:"p"},'cli_extra_args: "-H \\\\\\"Authorization: Bearer 1234\\\\\\" --verbosity INFO"')))),(0,r.kt)("p",null,"Here is a sample ",(0,r.kt)("em",{parentName:"p"},"Schema Conformance Test Action")," with its configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-YAML"},"- uses: levoai/actions/schema-conformance@v1-beta\n  with:\n    # Authorization key required to execute the Levo CLI. Please refer to https://app.levo.ai/settings/keys to get your authorization key.\n    authorization-key: <'Specify your CLI authorization key here'>\n\n    # The ID of your organization in the Levo dashboard. Please refer to https://app.levo.ai/settings/organization to get your organization id.\n    organization-id: <'Specify your organization ID here'>\n\n    # The URL or file path of the API's OpenAPI schema.\n    schema: '<URL of schema|File path of schema>'\n\n    # The base URL of the Application/API under test.\n    target: '<Specify the target base URL here>'\n\n    # [OPTIONAL] If you do not want to report the result of this execution to the Levo cloud, set this value to false. Default: true.\n    report: <true|false>\n\n    # [OPTIONAL] Use this option to pass extra CLI arguments like headers or verbosity.\n    # Please use \\\\\\\u02dd to escape quotes.\n    # E.g. cli_extra_args: \"-H \\\\\\\"Authorization: Bearer 1234\\\\\\\" --verbosity INFO\"\n    cli_extra_args: <\"Specify any extra arguments here\">\n")),(0,r.kt)("h4",{id:"job-outputs-1"},"Job Outputs"),(0,r.kt)("p",null,"This pre-built ",(0,r.kt)("em",{parentName:"p"},"Action")," produces the below ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs"},"Outputs"),", which can be referenced by downstream Actions/Jobs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-YAML"},"outputs:\n  success:\n    description: '# of successful test cases'\n  failed:\n    description: '# of failed test cases'\n")))}h.isMDXComponent=!0},4768:function(e,t,n){t.Z=n.p+"assets/images/test-plan-lrn-469d9ba90b4bc5b726e6de6a847413c2.png"}}]);