version: "3.9"
services:
  levoai-rabbitmq:
    image: 'rabbitmq:3.12.8-management'
    container_name: levoai-rabbitmq
    restart: always
    healthcheck:
      test: rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
      interval: 10s
      timeout: 10s
      retries: 10
    ports:
      - '5672:5672'
      - '5671:5671'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME:-levoai}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-levoailevoai}
      # send logs to stdout, ref: https://www.rabbitmq.com/logging.html#log-file-location
      RABBITMQ_LOGS: '-'
    command: >
      bash -c "mkdir -p /opt/rabbitmq/resources &&
      openssl req -x509 -nodes -newkey rsa:4096 -subj "/C=IN/ST=Telangana/L=Hyderabad/O=Levo.ai/OU=Security/CN=localhost:5671" -keyout /opt/rabbitmq/resources/ca.key -out /opt/rabbitmq/resources/ca.crt -days 365000 &&
      openssl req -nodes -new -newkey rsa:4096 -subj  "/C=IN/ST=Telangana/L=Hyderabad/O=Levo.ai/OU=Security/CN=localhost:5671"  -keyout /opt/rabbitmq/resources/server.key -out /opt/rabbitmq/resources/server.csr -days 365000 &&
      openssl x509 -req -in /opt/rabbitmq/resources/server.csr -CA /opt/rabbitmq/resources/ca.crt -CAkey /opt/rabbitmq/resources/ca.key -CAcreateserial -out /opt/rabbitmq/resources/server.crt -days 365000 &&
      chmod -R 755 /opt/rabbitmq/resources &&
      echo '
            listeners.tcp.1 = 0.0.0.0:5672
            listeners.ssl.default = 5671
            ssl_options.cacertfile = /opt/rabbitmq/resources/ca.crt
            ssl_options.certfile = /opt/rabbitmq/resources/server.crt
            ssl_options.keyfile = /opt/rabbitmq/resources/server.key
            ssl_options.verify = verify_none
      ' > /etc/rabbitmq/rabbitmq.conf &&
      /usr/local/bin/docker-entrypoint.sh rabbitmq-server"
    deploy:
      resources:
        limits:
          cpus: '${LEVOAI_RABBITMQ_CPU_LIMIT:-1.0}'
          memory: '${LEVOAI_RABBITMQ_MEM_LIMIT:-1024m}'
        reservations:
          cpus: '${LEVOAI_RABBITMQ_CPU_REQ:-0.50}'
          memory: '${LEVOAI_RABBITMQ_MEM_REQ:-512m}'

  levoai-satellite:
    image: 'levoai/satellite:${LEVOAI_SATELLITE_VERSION:-stable}'
    container_name: levoai-satellite
    restart: always
    ports:
      - '9999:9999'
    command:
      - "-w"
      - "4"
      - "-b"
      - "0.0.0.0:9999"
      - "--worker-tmp-dir"
      - "/dev/shm"
      - "--worker-class"
      - "uvicorn.workers.UvicornWorker"
      - "--worker-connections"
      - "500"
      - "levoai_e7s.satellite.satellite:create_server()"
    environment:
      LEVOAI_DEBUG_ENABLED: ${LEVOAI_SATELLITE_DEBUG_ENABLED:-false}
      LEVOAI_DEBUG_PORT: ${LEVOAI_SATELLITE_DEBUG_PORT:-12345}
      LEVOAI_DEBUG_SERVER_HOST: ${LEVOAI_DEBUG_SERVER_HOST:-host.docker.internal}
      LEVOAI_MODE: docker-compose
      LEVOAI_LOG_LEVEL: ${LEVOAI_LOG_LEVEL:-INFO}
      LEVOAI_CONF_OVERRIDES: >
        {
          "onprem-api": {
            "url": "${LEVOAI_BASE_URL:-https://api.levo.ai}",
            "refresh-token": "${LEVOAI_AUTH_KEY}",
            "org-id": "${LEVOAI_ORG_ID:-}",
            "org-prefix": "${LEVOAI_ORG_PREFIX:-}"
          },
          "rabbitmq": {
            "use_ssl": ${LEVOAI_ENABLE_RMQ_SSL:-false}
          }
        }
    depends_on:
      levoai-rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '${LEVOAI_SATELLITE_CPU_LIMIT:-0.60}'
          memory: '${LEVOAI_SATELLITE_MEM_LIMIT:-1024m}'
        reservations:
          cpus: '${LEVOAI_SATELLITE_CPU_REQ:-0.30}'
          memory: '${LEVOAI_SATELLITE_MEM_REQ:-256m}'

  levoai-tagger:
    image: 'levoai/satellite:${LEVOAI_SATELLITE_VERSION:-stable}'
    container_name: levoai-tagger
    restart: always
    entrypoint: ['python', '-OO']
    command:
      - /opt/levoai/e7s/src/python/levoai_e7s/tag_server.py
    environment:
      LEVOAI_DEBUG_ENABLED: ${LEVOAI_TAGGER_DEBUG_ENABLED:-false}
      LEVOAI_DEBUG_PORT: ${LEVOAI_TAGGER_DEBUG_PORT:-1234}
      LEVOAI_MODE: docker-compose
      LEVOAI_LOG_LEVEL: ${LEVOAI_LOG_LEVEL:-INFO}
      LEVOAI_DEBUG_SERVER_HOST: ${LEVOAI_DEBUG_SERVER_HOST:-host.docker.internal}
      PI_DETECTOR_DATA_DIR: /opt/levoai/datasets/
      LEVOAI_CONF_OVERRIDES: >
        {
          "onprem-api": {"url": "${LEVOAI_BASE_URL:-https://api.levo.ai}",
          "refresh-token": "${LEVOAI_AUTH_KEY}", "org-id": "${LEVOAI_ORG_ID:-}",
          "org-prefix": "${LEVOAI_ORG_PREFIX:-}"},
          "dynamic_url_threshold_factor": "${DYNAMIC_URL_THRESHOLD_FACTOR:-0.5}",
          "disable_ml_detector": "${LEVOAI_DISABLE_ML_DETECTOR:-true}",
          "api_rule_evaluation": {
              "enabled": "${LEVOAI_EVALUATE_API_RULES:-True}"
          },
          "enable_ssl_cert_checks": "${LEVOAI_ENABLE_SSL_CERT_CHECKS:-True}",
          "rabbitmq": {
            "use_ssl": ${LEVOAI_ENABLE_RMQ_SSL:-false}
          }
        }
    depends_on:
      levoai-rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '${LEVOAI_TAGGER_CPU_LIMIT:-2.0}'
          memory: '${LEVOAI_TAGGER_MEM_LIMIT:-2048m}'
        reservations:
          cpus: '${LEVOAI_TAGGER_CPU_REQ:-0.50}'
          memory: '${LEVOAI_TAGGER_MEM_REQ:-512m}'

  levoai-collector:
    image: 'levoai/collector:${LEVOAI_COLLECTOR_VERSION:-stable}'
    container_name: levoai-collector
    restart: always
    ports:
      - '4317:4317'
    depends_on:
      - levoai-satellite
    deploy:
      resources:
        limits:
          cpus: '${LEVOAI_COLLECTOR_CPU_LIMIT:-0.60}'
          memory: '${LEVOAI_COLLECTOR_MEM_LIMIT:-1024m}'
        reservations:
          cpus: '${LEVOAI_COLLECTOR_CPU_REQ:-0.30}'
          memory: '${LEVOAI_COLLECTOR_MEM_REQ:-256m}'

  levoai-ion:
    image: 'levoai/satellite:${LEVOAI_SATELLITE_VERSION:-stable}'
    container_name: levoai-ion
    restart: always
    entrypoint:
      - 'python'
      - '-OO'
      - /opt/levoai/e7s/src/python/levoai_ion/ion_server.py
    depends_on:
      levoai-rabbitmq:
        condition: service_healthy
    environment:
      LEVOAI_MODE: docker-compose
      LEVOAI_LOG_LEVEL: ${LEVOAI_LOG_LEVEL:-INFO}
      LEVOAI_CONF_OVERRIDES: >
        {
          "onprem-api": {
              "url": "${LEVOAI_BASE_URL:-https://api.levo.ai}",
              "refresh-token": "${LEVOAI_AUTH_KEY}",
              "org-id": "${LEVOAI_ORG_ID:-}",
              "org-prefix": "${LEVOAI_ORG_PREFIX:-}"
          }
        }
